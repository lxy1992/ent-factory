// Code generated by ent, DO NOT EDIT.

package entschema

import (
	"time"

	"github.com/zaihui/ent-factory/gen/entschema/test"
	"github.com/zaihui/ent-factory/spec/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	testMixin := schema.Test{}.Mixin()
	testMixinFields0 := testMixin[0].Fields()
	_ = testMixinFields0
	testFields := schema.Test{}.Fields()
	_ = testFields
	// testDescUID is the schema descriptor for uid field.
	testDescUID := testMixinFields0[0].Descriptor()
	// test.DefaultUID holds the default value on creation for the uid field.
	test.DefaultUID = testDescUID.Default.(func() string)
	// test.UIDValidator is a validator for the "uid" field. It is called by the builders before save.
	test.UIDValidator = func() func(string) error {
		validators := testDescUID.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(uid string) error {
			for _, fn := range fns {
				if err := fn(uid); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// testDescCreatedAt is the schema descriptor for created_at field.
	testDescCreatedAt := testMixinFields0[1].Descriptor()
	// test.DefaultCreatedAt holds the default value on creation for the created_at field.
	test.DefaultCreatedAt = testDescCreatedAt.Default.(func() time.Time)
	// testDescUpdatedAt is the schema descriptor for updated_at field.
	testDescUpdatedAt := testMixinFields0[2].Descriptor()
	// test.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	test.DefaultUpdatedAt = testDescUpdatedAt.Default.(func() time.Time)
	// test.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	test.UpdateDefaultUpdatedAt = testDescUpdatedAt.UpdateDefault.(func() time.Time)
	// testDescName is the schema descriptor for name field.
	testDescName := testFields[1].Descriptor()
	// test.NameValidator is a validator for the "name" field. It is called by the builders before save.
	test.NameValidator = testDescName.Validators[0].(func(string) error)
	// testDescEnableTakeaway is the schema descriptor for enable_takeaway field.
	testDescEnableTakeaway := testFields[2].Descriptor()
	// test.DefaultEnableTakeaway holds the default value on creation for the enable_takeaway field.
	test.DefaultEnableTakeaway = testDescEnableTakeaway.Default.(bool)
	// testDescPhone is the schema descriptor for phone field.
	testDescPhone := testFields[3].Descriptor()
	// test.PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	test.PhoneValidator = testDescPhone.Validators[0].(func(string) error)
	// testDescAnnouncement is the schema descriptor for announcement field.
	testDescAnnouncement := testFields[4].Descriptor()
	// test.AnnouncementValidator is a validator for the "announcement" field. It is called by the builders before save.
	test.AnnouncementValidator = testDescAnnouncement.Validators[0].(func(string) error)
	// testDescEnableAutoAccept is the schema descriptor for enable_auto_accept field.
	testDescEnableAutoAccept := testFields[5].Descriptor()
	// test.DefaultEnableAutoAccept holds the default value on creation for the enable_auto_accept field.
	test.DefaultEnableAutoAccept = testDescEnableAutoAccept.Default.(bool)
	// testDescMode is the schema descriptor for mode field.
	testDescMode := testFields[14].Descriptor()
	// test.DefaultMode holds the default value on creation for the mode field.
	test.DefaultMode = testDescMode.Default.(int)
	// testDescImage is the schema descriptor for image field.
	testDescImage := testFields[17].Descriptor()
	// test.ImageValidator is a validator for the "image" field. It is called by the builders before save.
	test.ImageValidator = testDescImage.Validators[0].(func(string) error)
	// testDescAddress is the schema descriptor for address field.
	testDescAddress := testFields[18].Descriptor()
	// test.AddressValidator is a validator for the "address" field. It is called by the builders before save.
	test.AddressValidator = testDescAddress.Validators[0].(func(string) error)
	// testDescLatitude is the schema descriptor for latitude field.
	testDescLatitude := testFields[19].Descriptor()
	// test.LatitudeValidator is a validator for the "latitude" field. It is called by the builders before save.
	test.LatitudeValidator = testDescLatitude.Validators[0].(func(string) error)
	// testDescLongitude is the schema descriptor for longitude field.
	testDescLongitude := testFields[20].Descriptor()
	// test.LongitudeValidator is a validator for the "longitude" field. It is called by the builders before save.
	test.LongitudeValidator = testDescLongitude.Validators[0].(func(string) error)
	// testDescSort is the schema descriptor for sort field.
	testDescSort := testFields[22].Descriptor()
	// test.DefaultSort holds the default value on creation for the sort field.
	test.DefaultSort = testDescSort.Default.(int)
	// testDescPayMode is the schema descriptor for pay_mode field.
	testDescPayMode := testFields[23].Descriptor()
	// test.DefaultPayMode holds the default value on creation for the pay_mode field.
	test.DefaultPayMode = testDescPayMode.Default.(string)
	// testDescPrintConfig is the schema descriptor for print_config field.
	testDescPrintConfig := testFields[26].Descriptor()
	// test.DefaultPrintConfig holds the default value on creation for the print_config field.
	test.DefaultPrintConfig = testDescPrintConfig.Default.(schema.PrintConfig)
}
